{
	"info": {
		"_postman_id": "c7e03518-0e42-4b8b-9a9d-37fa3c53785b",
		"name": "User_Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41672986"
	},
	"item": [
		{
			"name": "TS_01. Register new user",
			"item": [
				{
					"name": "TC_1.1. Register new user all parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"username_positive\", \"user_\" + Math.floor(Math.random() * 10000));",
									"pm.collectionVariables.set(\"email_positive\", `test${Math.floor(Math.random() * 10000)}@demo.lt`);",
									"pm.collectionVariables.set(\"title_positive\", \"Mrs.\");",
									"pm.collectionVariables.set(\"password_positive\", \"test123\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"user_ID\", responseData.user.id);",
									"",
									"pm.test(\"Status code is 201 - User registered successfully\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", () =>  {",
									"    pm.expect(responseData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"pm.test(\"Response contains user object with expected fields\", () => {",
									"    pm.expect(responseData).to.have.property(\"user\");",
									"    pm.expect(responseData.user).to.have.property(\"id\").that.is.a(\"number\");",
									"    pm.expect(responseData.user).to.have.property(\"username\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(responseData.user).to.have.property(\"email\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(responseData.user).to.have.property(\"title\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(responseData.user).to.have.property(\"created_at\").that.is.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.test(\"User does not exceed maximum length\", () => {",
									"    pm.expect(responseData.user.username.length).to.be.at.most(50);",
									"});",
									"",
									"pm.test(\"Email does not exceed maximum length\", () => {",
									"    pm.expect(responseData.user.email.length).to.be.at.most(100);",
									"});",
									"",
									"pm.test(\"Title does not exceed maximum length\", () => {",
									"    pm.expect(responseData.user.title.length).to.be.at.most(50);",
									"})",
									"",
									"pm.test(\"Correct user details\", () => {",
									"    pm.expect(responseData.user.username).to.be.eq(pm.collectionVariables.get(\"username_positive\"));",
									"    pm.expect(responseData.user.email).to.be.eq(pm.collectionVariables.get(\"email_positive\"));",
									"    pm.expect(responseData.user.title).to.be.eq(pm.collectionVariables.get(\"title_positive\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_positive}}\",\n    \"email\": \"{{email_positive}}\",\n    \"title\": \"Mrs.\",\n    \"password\": \"{{password_positive}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.2. Register new user - mandatory parameters only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201 - User registered successfully\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains success message\", () => {",
									"    pm.expect(responseData).to.have.property(\"message\", \"User registered successfully\");",
									"});",
									"",
									"pm.test(\"Response contains user object with expected fields and property values\", () => {",
									"    pm.expect(responseData).to.have.property(\"user\");",
									"    pm.expect(responseData.user).to.have.property(\"id\").that.is.a(\"number\");",
									"    pm.expect(responseData.user).to.have.property(\"username\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(responseData.user).to.have.property(\"email\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(responseData.user).to.have.property(\"created_at\").that.is.a(\"string\").and.not.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    // \"title\": \"Mrs.\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.3. Register  - without username parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Validate response status code",
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Validate response is in JSON format",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate the error message exists in the response",
									"pm.test(\"Error message is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"});",
									"",
									"// Ensure the error message is related to the missing username",
									"pm.test(\"Error message is about missing username\", () => {",
									"    pm.expect(responseData.error).to.include(\"username\");",
									"});",
									"",
									"// Ensure the response does not contain user data",
									"pm.test(\"Response does not return user details\", () => {",
									"    pm.expect(responseData).to.not.have.property(\"user\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.4. Register - empty username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should contain error message\", () => {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.be.a(\"string\");",
									"    pm.expect(responseData.error).to.include(\"username\"); // Ensuring error is related to username",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); // Ensure response time is under 1s",
									"});",
									"",
									"pm.test(\"Response has correct content type\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"email\": \"{{$randomEmail}}\",\n    \"title\": \"Mrs.\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.5. Register - duplicated username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for duplicate username\", () => {",
									"    pm.expect(responseData.error).to.include(\"duplicate key value violates unique constraint\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username_positive}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"title\": \"Mrs.\",\n  \"password\": \"Test@123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.6.  Register - username length exceeds 50",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const longUsername = \"users_\" + (Math.floor(Math.random() * 100000)).toString().repeat(9); ",
									"",
									"pm.collectionVariables.set(\"username_long\", longUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.be.a(\"string\");",
									"});",
									"pm.test(\"Error message indicates username length issue\", () => {",
									"    pm.expect(responseData.error).to.equal(\"value too long for type character varying(50)\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_long}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"title\": \"Mr.\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.7.  Register - without email parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Validate response status code",
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Validate response is in JSON format",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate the error message exists in the response",
									"pm.test(\"Error message is present\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"});",
									"",
									"// Ensure the error message is related to the missing email",
									"pm.test(\"Error message is about missing email\", () => {",
									"    pm.expect(responseData.error).to.include(\"email\");",
									"});",
									"",
									"// Ensure the response does not return user details",
									"pm.test(\"Response does not return user details\", () => {",
									"    pm.expect(responseData).to.not.have.property(\"user\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"title\": \"Ms.\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.8.  Register - empty email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should contain error message\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.be.a(\"string\");",
									"    pm.expect(responseData.error).to.include(\"email\"); ",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); ",
									"});",
									"",
									"pm.test(\"Response has correct content type\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"\",\n    \"title\": \"Mr.\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.9.  Register - duplicated email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message for duplicate email\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.include(\"duplicate key value violates unique constraint\"); // Adjust based on actual API message",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{email_positive}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.10.  Register  - without password parameter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Removed the attempt to parse response as JSON",
									"// Validated response body as text and checked for error message",
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is JSON\", () => {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Error message is present\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});",
									"",
									"pm.test(\"Error message is about missing password\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"Illegal arguments: undefined, number\");",
									"});",
									"",
									"pm.test(\"Response does not return user details\", () => {",
									"    pm.expect(pm.response.text()).to.not.include(\"user\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"email\": \"{{$randomEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_1.11. Register - empty data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"// Test 1: Check if response status is 400 (Bad Request)",
									"pm.test(\"Response status is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test 2: Validate error message for empty data",
									"pm.test(\"Error message for empty request body\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.include(\"Illegal arguments: undefined, number\" || \"Missing required fields\"); // Adjust based on actual API response",
									"});",
									"",
									"// Test 3: Ensure request body is empty",
									"pm.test(\"Request body should be empty\", () => {",
									"    pm.expect(pm.request.body.raw).to.eql(\"{}\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_02. Login",
			"item": [
				{
					"name": "TC_2.1. Login  user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"const token = pm.response.json().token;",
									"",
									"pm.collectionVariables.set(\"token\", token)",
									"",
									"pm.test(\"Response status code is 200\",() => {",
									"    pm.response.to.have.status(200);",
									"",
									"});",
									" ",
									"pm.test(\"Response time is less than 10000ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);",
									"",
									"});",
									" ",
									"pm.test(\"Response has the required fields - message and token\", () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.token).to.exist;",
									"",
									"});",
									" ",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									" ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_positive}}\",\n    \"email\": \"{{email_positive}}\",\n    \"title\": \"Mrs.\",\n    \"password\": \"{{password_positive}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.2. Login - username not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									" ",
									" ",
									"pm.test(\"Response has the required field - error\",() => {",
									"  pm.expect(responseData).to.have.property('error');",
									"});",
									" ",
									" ",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									" ",
									" ",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									" ",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.3. Login - empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									" ",
									" ",
									"pm.test(\"Response has the required field - error\", () => {",
									"  pm.expect(responseData).to.have.property('error');",
									"});",
									" ",
									" ",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									" ",
									" ",
									"pm.test(\"Response time is less than 500ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									" ",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.4. Login - invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400 for invalid username\", () => {",
									"    if (pm.response.code === 400) {",
									"        const responseData = pm.response.json();",
									"        pm.expect(responseData).to.have.property(\"error\");",
									"        pm.expect(responseData.error).to.include(\"Invalid username or password\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"unknown_user_001\",\n    \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.5. Login - password not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									" ",
									" ",
									"pm.test(\"Response has the required fields\", () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									" ",
									" ",
									"pm.test(\"Error field is a non-empty string\", () => {",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
									"});",
									" ",
									" ",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									" ",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.6. Login - password not provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status code is 400\", () => {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									" ",
									" ",
									"pm.test(\"Response has the required fields\", () => {",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist;",
									"});",
									" ",
									" ",
									"pm.test(\"Error field is a non-empty string\", () => {",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error field should not be empty\");",
									"});",
									" ",
									" ",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									" ",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"{{$randomUserName}}\",\n    \"password\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_2.7. Login - invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Returns 400 for invalid password\", function () {",
									"    if (pm.response.code === 400) {",
									"        const responseData = pm.response.json();",
									"        pm.expect(responseData).to.have.property(\"error\");",
									"        pm.expect(responseData.error).to.include(\"Invalid username or password\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"{{$randomUserName}}\",\n    \"password\": \"abc123abc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TS_03. Update",
			"item": [
				{
					"name": "TC_3.1. Update - with valid ID and details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Update user - valid ID and details returns 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should contain updated user data\", () => {",
									"    pm.expect(responseData).to.have.property(\"message\", \"User updated successfully\");",
									"    pm.expect(responseData).to.have.property(\"user\");",
									"    pm.expect(responseData.user).to.have.property(\"id\", pm.collectionVariables.get(\"user_ID\"));  // Check user ID",
									"    pm.expect(responseData.user).to.have.property(\"email\");  // Check email",
									"    // pm.expect(responseData.user.email).to.include(\"randomEmail\");  // Check email format",
									"    pm.expect(responseData.user).to.have.property(\"title\", \"Mrs.\");  // Check title",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"title\": \"Mrs.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{user_ID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_3.2. Update - with non-existing ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.test(\"Response status is 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response should contain an error message\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.eql(\"You can only update your own profile\");",
									"});",
									"",
									"pm.test(\"All fields in response should not be empty\", () => {",
									"    // Ensure response has error message and it's not empty",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"    pm.expect(responseData.error).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"update_nonexist_user_id\", 99999); // Set a non-existing ID",
									"pm.collectionVariables.set(\"update_nonexist_email\", \"newemail@example.com\");",
									"pm.collectionVariables.set(\"update_nonexist_title\", \"New Title\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Token",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"title\": \"Ms.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/9999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_3.3. Update - without ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const responseData = pm.response.json();",
									"",
									"pm.test(\"Update user - without ID returns 404\", () => {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// pm.test(\"Response should contain error message\", () => {",
									"//     pm.expect(responseData).to.have.property(\"error\", \"User ID is required\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Beare {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"title\": \"Mrs.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_3.4. Update - with empty title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user - empty title returns 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"update_email\", \"newnewemail@example.com\");",
									"// pm.collectionVariables.set(\"update_title\", \"New Title\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Beare {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email_positive}}\",\n    \"title\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{user_ID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_3.5. Update - with empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update user - empty email returns 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// pm.test(\"Response should contain error message for empty email\", () => {",
									"//     const responseData = pm.response.json();",
									"//     pm.expect(responseData).to.have.property(\"error\", \"Email cannot be empty\");",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"update_email\", \"newnewemail@example.com\");",
									"pm.collectionVariables.set(\"update_title\", \"New Title\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"\",\n    \"title\": \"Mrs.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{user_ID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC_3.6. Update - without mandatory parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									" ",
									"pm.test(\"Update user - missing mandatory parameters returns 400\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response should contain error message for missing parameters\", () => {",
									"    pm.expect(responseData).to.have.property(\"error\", \"null value in column \\\"email\\\" of relation \\\"users\\\" violates not-null constraint\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Beare {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/{{user_ID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{user_ID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "username_positive",
			"value": ""
		},
		{
			"key": "email_positive",
			"value": ""
		},
		{
			"key": "title_positive",
			"value": ""
		},
		{
			"key": "email_long",
			"value": ""
		},
		{
			"key": "username_long",
			"value": ""
		},
		{
			"key": "password_long",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "user_ID",
			"value": ""
		},
		{
			"key": "password_positive",
			"value": ""
		},
		{
			"key": "update_email",
			"value": ""
		},
		{
			"key": "update_title",
			"value": ""
		}
	]
}